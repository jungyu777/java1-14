package test.Mypac;
/*
 * class 의 역활 1. 객체의 설계도 역활2. data type 역활3. static 필드와 메소드를 포함하는 역활
 * 1. 객체의 설계도 역활
 * -객체 heap 영역(사물함) 에 들어있는 물건이라고 생각하면 된다.
 * -class를 이용해서 객체를 원하는 시점에 원하는 갯수만큼 만들어 낼수 있다
 * -만들어진 객체가 어떤 저장소와 어떤 기능을 가지게 할지 class로 설계할수 있
 * 사물함에 들어있는 물건이 객체 ,사물함키가 참조값,물건마다 타입이다르다
 * 2. data type 역활
 * 3. static 필드와 메소드를 포함하는 역활
 */

/*
 * 객체는 필드와 메소드 / 참조값은 Car car1<-참조값(사물함키) = new Car
 * heap 영역 객체가 만들어져서 보관되는 사물함영역 각각의 객체는 사물함키값(참조값)으로 구분된다.
 * 즉 참조값을 이용해서  원하는 객체를 찾아갈수있다,
 * 
 * stack : 메소드 안쪽이 실행될떄 메소드 안에서 만드는 지역변수가 만들어 지는 영역
 * 지역변수 명으로 원하는 값을 찾아서 사용 할수있다.
 * 
 * 오직1개만 만들어진다
 * static: static 필드나 static 메소드가 클래스에 포장되어서 (감싸져서) 만들어 지는 영역
 * 클래스명을 이용해서 원하는 클래스를 찾아갈수 있다.(클래스명)
 * 
 *
 */

public class Car {//설계도
	/*
	 * [필드 정의하기]
	 * -클래스의{ } 중괄호 안에 아래와 같은 형식으로 필드를 정의 할수있다.
	 * -초기값을 부여하지 않으면 기본값이 들어간다.
	 * int 의 기본값은 0, boolean의 기본값은 false , 참조데이터 type 의 기본값은 null
	 * 
	 *    접근지정자 date type 필드명 = 초기값 ; 
	 */
	//필드는 메소드가 정상동작하기 위한 동작들을 담고있다
	public String name;
	public int price;
	
	/*
	 * [메소드 정의하기]
	 * 
	 * 접근지정자 return type 메소드명 (){
	 * 
	 * }
	 */
	public void drive() {
		//접근지정자 / 리턴타입/메소드이름
		//여기는 메소드 안쪽블럭 drive() 메소드가 call 되었을떄 실행할 java code 를 여러줄 모아놓을수있다
		
		System.out.println(this.name + "달려요");
		
	}	
	
	
	
	public void showInfo() {
		System.out.println("차의이름은 "+this.name +" 이고 "+ this.price+" 만원입니다. ");
	}
	
	 
}
